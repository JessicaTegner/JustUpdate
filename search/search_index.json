{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to JustUpdate JustUpdate is a simple updater system, written for python, that uses each platforms native methods to perform an application update. installation Os specific requirements: Python3. For windows: NSIS version 3x. For Mac: the productbuild command available (can be installed by running the command in the terminal, or by installing xCode developer tools). The module itself To install do the following pip install justupdate or install from the git repository. git clone <https://github.com/NicklasMCHD/JustUpdate.git> cd JustUpdate python setup.py install Usage: See usage cli and usage client Terminology for the CLI: term explanation Build the new version of the application in the build phase JustUpdate Repository (ju-repo) The repository is where the configuration, current builds, new and archived updates are kept. commit A version of your application commited to the JustUpdate Repository upload service The service used to upload the commited updates helping out Have you found this utility helpful and wan't to support me in my work? you are welcome to buy me a coffee (isn't that what they all say... Or is it pizza, nevermind... You know what I mean.) or alternatively follow me on twitter","title":"Welcome to JustUpdate"},{"location":"#welcome-to-justupdate","text":"JustUpdate is a simple updater system, written for python, that uses each platforms native methods to perform an application update.","title":"Welcome to JustUpdate"},{"location":"#installation","text":"","title":"installation"},{"location":"#os-specific-requirements","text":"Python3. For windows: NSIS version 3x. For Mac: the productbuild command available (can be installed by running the command in the terminal, or by installing xCode developer tools).","title":"Os specific requirements:"},{"location":"#the-module-itself","text":"To install do the following pip install justupdate or install from the git repository. git clone <https://github.com/NicklasMCHD/JustUpdate.git> cd JustUpdate python setup.py install","title":"The module itself"},{"location":"#usage","text":"See usage cli and usage client","title":"Usage:"},{"location":"#terminology-for-the-cli","text":"term explanation Build the new version of the application in the build phase JustUpdate Repository (ju-repo) The repository is where the configuration, current builds, new and archived updates are kept. commit A version of your application commited to the JustUpdate Repository upload service The service used to upload the commited updates","title":"Terminology for the CLI:"},{"location":"#helping-out","text":"Have you found this utility helpful and wan't to support me in my work? you are welcome to buy me a coffee (isn't that what they all say... Or is it pizza, nevermind... You know what I mean.) or alternatively follow me on twitter","title":"helping out"},{"location":"usage-cli/","text":"Usage CLI The cli (command line interface) is one of two essential parts of JustUpdate. The CLI is what's will be helping you producing, commiting and uploading your update packages. Initialization First up, initialize a JustUpdate repository. justupdate init go through the onscreen prompts to finish the initialization. Creating a spec file. Note: You'll need to do this on each platform you want to produce builds for. If you haven't already, you'll need to generate a JustUpdate spec file. justupdate make-spec pyinstaller_arguments scriptfile replace \"pyinstaller_arguments\" with actual PyInstaller arguments. Note: At this moment in time, --onedir and --windowed are required on MacOS, because JustUpdate only work with MacOS Application Bundles. Producing a build Note: You'll need to do this on each platform, you want to produce a build for. After generating a spec file, run the folowing command to produce a build. justupdate build spec-file Commiting a new version Note: You'll need to do this on each platform, after generating a build for that platform When you have asured that your build works as expected, you can commit it to the history in the JustUpdate repository like so. justupdate commit version Valid versions Versions are deemed valid if the following criteria are met. At least 3 numbers separated by dots. (optional) the letter indicating if it's an alpha (a) or beta (b) followed by a number indicating which alpha/beta number it is. Below are some examples for some valid version numbers. 1.2.3 (a stable version) 1.4.5a12 (An alpha) 2.0.0b7 (A beta version) Upload all the commited versions After generating builds and commiting them for the wanted platforms, it's time to upload them. This only needs to be done once and can be done the following way. To get information about the available uploader services, run the following command. justupdate upload After finding a service to your liking, run the following command with the service name from the above list, to initate the update. justupdate upload -s service If it's the first time uploading with this service in the JustUpdate repository, the initialization for that service will start. The scp, as an example, will begin to ask you for connection information and remote path to store the JustUpdate files. The uploader service initialization is a one time process and will be remembered for later use (only in that JustUpdate repository). Note: The credentials for each initialized uploader service will be saved to \"ju-repo/credentials.dat\"","title":"Usage CLI"},{"location":"usage-cli/#usage-cli","text":"The cli (command line interface) is one of two essential parts of JustUpdate. The CLI is what's will be helping you producing, commiting and uploading your update packages.","title":"Usage CLI"},{"location":"usage-cli/#initialization","text":"First up, initialize a JustUpdate repository. justupdate init go through the onscreen prompts to finish the initialization.","title":"Initialization"},{"location":"usage-cli/#creating-a-spec-file","text":"Note: You'll need to do this on each platform you want to produce builds for. If you haven't already, you'll need to generate a JustUpdate spec file. justupdate make-spec pyinstaller_arguments scriptfile replace \"pyinstaller_arguments\" with actual PyInstaller arguments. Note: At this moment in time, --onedir and --windowed are required on MacOS, because JustUpdate only work with MacOS Application Bundles.","title":"Creating a spec file."},{"location":"usage-cli/#producing-a-build","text":"Note: You'll need to do this on each platform, you want to produce a build for. After generating a spec file, run the folowing command to produce a build. justupdate build spec-file","title":"Producing a build"},{"location":"usage-cli/#commiting-a-new-version","text":"Note: You'll need to do this on each platform, after generating a build for that platform When you have asured that your build works as expected, you can commit it to the history in the JustUpdate repository like so. justupdate commit version","title":"Commiting a new version"},{"location":"usage-cli/#valid-versions","text":"Versions are deemed valid if the following criteria are met. At least 3 numbers separated by dots. (optional) the letter indicating if it's an alpha (a) or beta (b) followed by a number indicating which alpha/beta number it is. Below are some examples for some valid version numbers. 1.2.3 (a stable version) 1.4.5a12 (An alpha) 2.0.0b7 (A beta version)","title":"Valid versions"},{"location":"usage-cli/#upload-all-the-commited-versions","text":"After generating builds and commiting them for the wanted platforms, it's time to upload them. This only needs to be done once and can be done the following way. To get information about the available uploader services, run the following command. justupdate upload After finding a service to your liking, run the following command with the service name from the above list, to initate the update. justupdate upload -s service If it's the first time uploading with this service in the JustUpdate repository, the initialization for that service will start. The scp, as an example, will begin to ask you for connection information and remote path to store the JustUpdate files. The uploader service initialization is a one time process and will be remembered for later use (only in that JustUpdate repository). Note: The credentials for each initialized uploader service will be saved to \"ju-repo/credentials.dat\"","title":"Upload all the commited versions"},{"location":"usage-client/","text":"Usage Client The client is the python module that your application will import to check, download and execute updates created through the cli interface. Initialization First up, you'll need to import the JustUpdateClient, the ClientConfig you generated when setting up the cli, and any other modules you may need. from justupdate.client.client import JustUpdate from client_config import ClientConfig Then instantiate a JustUpdateClient object, passing in the required parameters client = JustUpdateClient(ClientConfig(), \"1.0.0\", \"stable\") You can also set a callback directly in the JustUpdateClient constructor, like so: client = JustUpdateClient(ClientConfig(), \"1.0.0\", \"stable\", update_callback) The first parameter is an instance to the client config you generated before. The second parameter is the current version of your application. the third parameter is the release channel you wan't to listen for updates on. The fourth parameter, which is optional, is a callable, that takes one parameter, that will be used as callbacks later. You can also set a callback later (useful if you wan't different things to happen depending on other factors) client.add_callback(update_callback) Note: There's no limit to how many callbacks you can attach. Checking for updates Then after initializing the JustUpdateClient, you can perform an update check with the following if client.update_available(): # proceed to download. else: # no update available, we are up to date. Downloading the update. After checking for updates, if an update is available, you can download it one of too ways, Asynchronous or Synchronous. The background flag in the download_update function, is used to tell, if you wan't to download Asynchronous or Synchronous. Downloading the update Synchronously If you choose to download the update Synchronously, the download_update function will return when the update package has been downloaded and are ready to be executed. client.download_update(background=False) Downloading the update asynchronously If you choose to download the update asynchronously, the download_update function will return immediately, so you'll get a chance to keep the ui in your application responsive, show a progress bar or whatever you may like to do, while the update is downloading. client.download_update(background=True) while client.is_downloaded() == False: pass # do nothing, the percentage and other properties of the download are sent to the callbacks you have registered. Executing the update After downloading the update package, you can execute the update like so. Important: Your application should quit right after running the execute_update function, any saving or cleanup on your end, should be called before calling the execute_update function. client.execute_update() sys.exit(0) Post update actions It's possible to do something after an update has been performed (the first time your application starts after an update). To start, you'll need to initialize the JustUpdateClient object again, before you'll be able to check to see, if this is a post update situation. client = ... # JustUpdateClient initialization, same as above if client.is_post_update(): # do some post update actions, like displaying a changelog. When you're done with your post update actions, you need to tell JustUpdate, that it can clean up it's post update reference (so your post update actions doesn't trigger later, by mistake). client.post_update_cleanup()","title":"Usage Client"},{"location":"usage-client/#usage-client","text":"The client is the python module that your application will import to check, download and execute updates created through the cli interface.","title":"Usage Client"},{"location":"usage-client/#initialization","text":"First up, you'll need to import the JustUpdateClient, the ClientConfig you generated when setting up the cli, and any other modules you may need. from justupdate.client.client import JustUpdate from client_config import ClientConfig Then instantiate a JustUpdateClient object, passing in the required parameters client = JustUpdateClient(ClientConfig(), \"1.0.0\", \"stable\") You can also set a callback directly in the JustUpdateClient constructor, like so: client = JustUpdateClient(ClientConfig(), \"1.0.0\", \"stable\", update_callback) The first parameter is an instance to the client config you generated before. The second parameter is the current version of your application. the third parameter is the release channel you wan't to listen for updates on. The fourth parameter, which is optional, is a callable, that takes one parameter, that will be used as callbacks later. You can also set a callback later (useful if you wan't different things to happen depending on other factors) client.add_callback(update_callback) Note: There's no limit to how many callbacks you can attach.","title":"Initialization"},{"location":"usage-client/#checking-for-updates","text":"Then after initializing the JustUpdateClient, you can perform an update check with the following if client.update_available(): # proceed to download. else: # no update available, we are up to date.","title":"Checking for updates"},{"location":"usage-client/#downloading-the-update","text":"After checking for updates, if an update is available, you can download it one of too ways, Asynchronous or Synchronous. The background flag in the download_update function, is used to tell, if you wan't to download Asynchronous or Synchronous.","title":"Downloading the update."},{"location":"usage-client/#downloading-the-update-synchronously","text":"If you choose to download the update Synchronously, the download_update function will return when the update package has been downloaded and are ready to be executed. client.download_update(background=False)","title":"Downloading the update Synchronously"},{"location":"usage-client/#downloading-the-update-asynchronously","text":"If you choose to download the update asynchronously, the download_update function will return immediately, so you'll get a chance to keep the ui in your application responsive, show a progress bar or whatever you may like to do, while the update is downloading. client.download_update(background=True) while client.is_downloaded() == False: pass # do nothing, the percentage and other properties of the download are sent to the callbacks you have registered.","title":"Downloading the update asynchronously"},{"location":"usage-client/#executing-the-update","text":"After downloading the update package, you can execute the update like so. Important: Your application should quit right after running the execute_update function, any saving or cleanup on your end, should be called before calling the execute_update function. client.execute_update() sys.exit(0)","title":"Executing the update"},{"location":"usage-client/#post-update-actions","text":"It's possible to do something after an update has been performed (the first time your application starts after an update). To start, you'll need to initialize the JustUpdateClient object again, before you'll be able to check to see, if this is a post update situation. client = ... # JustUpdateClient initialization, same as above if client.is_post_update(): # do some post update actions, like displaying a changelog. When you're done with your post update actions, you need to tell JustUpdate, that it can clean up it's post update reference (so your post update actions doesn't trigger later, by mistake). client.post_update_cleanup()","title":"Post update actions"},{"location":"utilities/","text":"Utilities Below are documentation on varius utilities found in JustUpdate. justupdate.repo.version.Version The version class, can be used to validate version strings, get a human representation, compare too versions against each other and more. from justupdate.repo.version import Version test_version = Version(\"1.0.0a1\") test_version.to_human_readable() # 1.0.0 alpha 1 test_version.is_alpha() # True test_version.is_beta() # False test_version.is_stable() # False other_version = Version(\"1.0.0a2\") test_version > other_version # False test_version < other_version # True test_version == other_version # False","title":"Utilities"},{"location":"utilities/#utilities","text":"Below are documentation on varius utilities found in JustUpdate.","title":"Utilities"},{"location":"utilities/#justupdaterepoversionversion","text":"The version class, can be used to validate version strings, get a human representation, compare too versions against each other and more. from justupdate.repo.version import Version test_version = Version(\"1.0.0a1\") test_version.to_human_readable() # 1.0.0 alpha 1 test_version.is_alpha() # True test_version.is_beta() # False test_version.is_stable() # False other_version = Version(\"1.0.0a2\") test_version > other_version # False test_version < other_version # True test_version == other_version # False","title":"justupdate.repo.version.Version"}]}